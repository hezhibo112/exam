import {getUserinfoNew} from "@/utils/userinfo"
const {
    AddQuestions,
    WatchQuestions,
    EditQuestions,
    QuestionsDetail,
    Grade,
    Student,
    Room,
    QuestionsType,
    AddUser,
    Menu,
    ExamEdit,
    ExamList,
    ExamDetail,
    ExaminationPapers,
    ExamPaperClassList,
    ExamPaperClassmate,
    AddExam,
    ShowUser,
}=require("@/views/index");
const grounps={
    Questions:{
        title:"试题管理",
        icon:"el-icon-c-scale-to-original"
    },
    User:{
        title:"用户管理",
        icon:"el-icon-user-solid"
    },
    Exam:{
        title:"考试管理",
        icon:"el-icon-date"
    },
    Class:{
        title:"班级管理",
        icon:"el-icon-s-data"
    }

}
const checkview=async (to,from,next)=>{
    let {view_id}=to.meta;
    let {limitView:data}=getUserinfoNew();
    let index=data.findIndex(item=>item.view_id==view_id)
    if(index>=0){
         next()
    }else{
        next("/permission")
    }
   
}


const subrouting=[
    {
        path:"addQuestions",
        components:AddQuestions,
        beforeEnter:checkview,
        meta:{
            title:"添加试题",
            identity_text:["出题者","管理员"],
            type:"Questions",
            visibility:true,
            view_id:"main-addQuestions",
        }
    },
    {
        path:"watchQuestions",
        components:WatchQuestions,
        beforeEnter:checkview,
        meta:{
            title:"查看试题",
            identity_text:["出题者","管理员"],
            type:"Questions",
            visibility:true,
            view_id:"main-watchQuestions",
        }
    },
    {
        path:"editQuestions",
        components:EditQuestions,
        beforeEnter:checkview,
        meta:{
            title:"编辑试题",
            identity_text:["出题者"],
            type:"Questions",
            visibility:false,
            view_id:"main-editQuestions",
        }
    },
    {
        path:"questionsDetail",
        components:QuestionsDetail,
        beforeEnter:checkview,
        meta:{
            title:"试题详情",
            identity_text:["出题者"],
            type:"Questions",
            visibility:false,
            view_id:"main-questionsDetail",
        }
    },
    {
        path:"grade",
        components:Grade,
        beforeEnter:checkview,
        meta:{
            identity_text:["出题者","管理员"],
            title:"班级管理",
            type:"Class",
            visibility:true,
            view_id:"main-grade",
        }
    },
    {
        path:"student",
        components:Student,
        beforeEnter:checkview,
        meta:{
            identity_text:["出题者"],
            title:"学生管理",
            type:"Class",
            visibility:true,
            view_id:"main-student",
        }
    },
    {
        path:"room",
        components:Room,
        beforeEnter:checkview,
        meta:{
            identity_text:["出题者","管理员"],
            title:"教室管理",
            type:"Class",
            visibility:true,
            view_id:"main-room",
        }
    }//-----------
    ,
    {
        path:"questionsType",
        components:QuestionsType,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"试题分类",
            type:"Questions",
            visibility:true,
            view_id:"main-questionsType",
        }
    },
    {
        path:"addUser",
        components:AddUser,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"添加用户",
            type:"User",
            visibility:true,
            view_id:"main-addUser",
        }
    },
    {
        path:"showUser",
        components:ShowUser,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"用户展示",
            type:"User",
            visibility:true,
            view_id:"main-showUser",
        }
    },
    {
        path:"addExam",
        components:AddExam,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"添加考试",
            type:"Exam",
            visibility:true,
            view_id:"main-addExam",
        }
    },
    {
        path:"menu",
        components:Menu,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"添加菜单",
            type:"User",
            visibility:false,
            view_id:"main-menu",
        }
    },
    {
        path:"examEdit",
        components:ExamEdit,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"创建试卷",
            type:"Exam",
            visibility:false,
            view_id:"main-examEdit",
        }
    },
    {
        path:"examList",
        components:ExamList,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"试卷列表",
            type:"Exam",
            visibility:true,
            view_id:"main-examList",
        }
    },
    {
        path:"examDetail",
        components:ExamDetail,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"试卷详情",
            type:"Exam",
            visibility:false,
            view_id:"main-examDetail",
        }
    },
    {
        path:"examinationPapers",
        components:ExaminationPapers,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"阅卷",
            type:"Questions",
            visibility:false,
            view_id:"main-examinationPapers",
        }
    },
    {
        path:"examPaperClassList",
        components:ExamPaperClassList,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"批卷班级",
            type:"Class",
            visibility:false,
            view_id:"main-examPaperClassList",
        }
    },
    {
        path:"examPaperClassmate",
        components:ExamPaperClassmate,
        beforeEnter:checkview,
        meta:{
            identity_text:["管理员"],
            title:"待批试卷",
            type:"Questions",
            visibility:false,
            view_id:"main-examPaperClassmate",
        }
    }
]
const getMenuData=()=>{
    let {limitView}=getUserinfoNew();
    return Object.keys(grounps).map(item=>{
        let children=subrouting.filter(val=>{
            let {type,visibility,view_id,identity_text}=val.meta;
            return limitView.find(key=>key.view_id==view_id && identity_text.includes(key.identity_text)) && visibility && type==item 
        })
        if(children.length){
            return {
                title:grounps[item].title,
                icon:grounps[item].icon,
                list:children
            }
        }else{
            return null;
        }
    }).filter(item=>item)
}
export  default{
    subrouting,
    getMenuData
}